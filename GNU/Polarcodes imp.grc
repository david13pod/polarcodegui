options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: untitled
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 56.0]
    rotation: 0
    state: enabled

blocks:
- name: List_n
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 72.0]
    rotation: 0
    state: enabled
- name: activate_RM
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 72.0]
    rotation: 0
    state: enabled
- name: channel
  id: variable
  parameters:
    comment: ''
    value: '''ucl'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 72.0]
    rotation: 0
    state: enabled
- name: msg_len
  id: variable
  parameters:
    comment: ''
    value: '30'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 72.0]
    rotation: 0
    state: enabled
- name: qpsk
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: bpsk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 220.0]
    rotation: 0
    state: enabled
- name: rate
  id: variable
  parameters:
    comment: ''
    value: '0.3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 72.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 64.0]
    rotation: 0
    state: enabled
- name: snr
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: EbNo_dB
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.5'
    stop: '20'
    value: '4'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 28.0]
    rotation: 0
    state: true
- name: blocks_char_to_float_0_1
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 428.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 424.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 784.0]
    rotation: 180
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 460.0]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1720, 812.0]
    rotation: 180
    state: enabled
- name: digital_constellation_encoder_bc_1
  id: digital_constellation_encoder_bc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 316.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom polarcodes import *\nfrom polarcodes import Sim_utils\n\
      import pprint\nimport time\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,msg_len=1,use_RM=True,rate=1,channel='ucl'):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Polar Encoder',   # will show up in GRC\n    \
      \        in_sig=[np.int8],\n            # in_sig=None,\n            out_sig=[np.int8]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.msg_len=msg_len\n\
      \        self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \n    # def forecast(self, noutput_items, ninput_items_required):\n    #   \
      \  #setup size of input_items[i] for work call\n    #     print(\"----------\
      \ Forecast function --------------\")\n    #     n_in1 = noutput_items\n   \
      \ #     print(\"noutput_items : \", type(ninput_items_required))\n    #    \
      \ n_in2 = self.msg_len\n    #     # print(n_in1,\"n_in : \",  n_in2)\n    #\
      \     ninput_items_required[0]=20\n    #     # ninput_items_required[1]=n_in2\n\
      \    #     print(\"ninput_items_required[0] : \", ninput_items_required)\n \
      \   #     # # print(\"noutput_items : \", noutput_items)\n    def forecast(self,\
      \ noutput_items, ninputs):\n        \"\"\"\n        forecast is only called\
      \ from a general block\n        this is the default implementation\n       \
      \ \"\"\"\n        # print(\"---------- Forecast function --------------\")\n\
      \        # print(\"ooo_items : \", noutput_items)\n        # ninput_items_required\
      \ = [0]*ninputs\n        ninput_items_required = [0]*ninputs\n        ninput_items_required[0]\
      \ = 10\n        # print(\"ninput_itemsreq : \", ninput_items_required)\n   \
      \     # for i in range(ninputs):\n        #     ninput_items_required[i] = 200\n\
      \        # print(\"ninput_itemsreq : \", ninput_items_required)\n        # time.sleep(1)\n\
      \        return ninput_items_required\n    \n    # noutput_items=200\n    #\
      \ ninput_items=200\n    def general_work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        # self.forecast(1,1)\n\
      \        # print('2',len(output_items[0]))\n        # print('2',len(input_items[0]))\n\
      \        # print((input_items[0].dtype))\n        # pprint.pprint((input_items[0]))\n\
      \        # pprint.pprint((input_items[1]))\n        msg_len=[self.msg_len] #\
      \ information length\n        # crc_n=Sim_utils.crc_selector(msg_len,'ucl')\
      \ # crc polynomial generator length\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    M=list(M.astype(int))\n        self.M=M\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            M=N  # no rate matching M == N\n\
      \        # print(1)\n        match_rate=list(np.array(k)/np.array(M))# K/E\n\
      \        # rate=list(np.array(msg_len)/np.array(M)) # A/E\n        construction='5g'\
      \ # construction type\n        # sim_time=10000 # number of blocks\n       \
      \ useRM=self.useRM\n        snr=1\n        # time.sleep(5)\n        # print(2)\n\
      \        # print(N,M,k,match_rate,useRM)\n        for i in range(0,len(msg_len)):\n\
      \            # time.sleep(2)\n            # print(1)\n            myPC=Sim_utils.matching_scheme_selector(N[i],M[i],k[i],match_rate[i],useRM,snr,construction)\n\
      \            # print(2)\n            # pprint.pprint((input_items[0]))\n   \
      \         crc_coded = input_items[0][:k[i]]\n            # print('crc', crc_coded)\n\
      \            myPC.x[myPC.frozen_lookup == 1] = crc_coded\n            myPC.u\
      \ = myPC.x.copy()\n            # print('bf enc',myPC.u)\n            # print(3)\n\
      \n            # print(myPC.u)\n            Encode(myPC)\n\n            myPC.tx\
      \ = myPC.u # No rate matching used\n            # print('enc', myPC.tx)\n  \
      \          # print(myPC.punct_flag)\n            # print(myPC.frozen)\n    \
      \        # print(msg_len,' ',len(myPC.u))\n            # output_items[0] = np.ones(256,dtype=np.int0)\n\
      \            # self.consume(0, M[i]) #consume port 1 input\n            output_items[0][:N[i]]\
      \ = myPC.tx.astype(np.int8)\n            # print('3',len(output_items[0][:N[i]]))\n\
      \            # print('4',(output_items[0][:N[i]]))\n            # time.sleep(5)\n\
      \            self.consume(0, len(input_items[0])) #consume port 0 input\n  \
      \          # self.consume(1, N[i]) #consume port 1 input\n            \n   \
      \     return len(output_items[0][:N[i]])\n        # return len(input_items[0])\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    use_RM: activate_RM
  states:
    _io_cache: ('Polar Encoder', 'blk', [('msg_len', '1'), ('use_RM', 'True'), ('rate',
      '1'), ('channel', "'ucl'")], [('0', 'byte', 1)], [('0', 'byte', 1)], 'Embedded
      Python Block example - a simple multiply const', ['channel', 'msg_len', 'rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 284.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom polarcodes import *\nfrom polarcodes import Sim_utils\n\
      import pprint\nimport time\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,msg_len=1,rate=1,use_RM=True,channel='ucl'):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Message generator',   # will show up in GRC\n\
      \            # in_sig=[np.int8],\n            in_sig=None,\n            out_sig=[np.int8]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.msg_len=msg_len\n\
      \        self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \n    def general_work(self, input_items, output_items):\n        \"\"\"example:\
      \ multiply with constant\"\"\"\n        # print(len(input_items[0]))\n     \
      \   # print((input_items[0].dtype))\n        # pprint.pprint((input_items[0]))\n\
      \        # print(self.msg_len)\n\n        time.sleep(5)\n        msg_len=[self.msg_len]\
      \ # message length\n\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    self.M=list(M.astype(int))\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            self.M=N  # no rate matching M\
      \ == N\n       \n\n        for i in range(0,len(msg_len)):\n            my_message\
      \ = np.random.randint(2, size=msg_len[i],dtype=np.int8)\n            zobo =\
      \ np.zeros(self.M[i])\n            \n            with open('sim6msg.txt','a')\
      \ as f:\n                f.write(f'{list(my_message)},{N[i]},{self.M[i]},{self.rate}.\\\
      n')\n                f.close()\n\n            output_items[0][:self.M[i]] =\
      \ zobo\n            output_items[0][:msg_len[i]] = my_message.astype(np.int8)\n\
      \        \n        print((output_items[0][:msg_len[0]]))\n        # print((self.M[0]))\n\
      \        # print((output_items[0][:msg_len]))\n        # self.produce(0, msg_len)\
      \ #consume port 0 input\n        \n            \n        return len(output_items[0][:self.M[0]])\n\
      \        # return\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    use_RM: activate_RM
  states:
    _io_cache: ('Message generator', 'blk', [('msg_len', '1'), ('rate', '1'), ('use_RM',
      'True'), ('channel', "'ucl'")], [], [('0', 'byte', 1)], 'Embedded Python Block
      example - a simple multiply const', ['channel', 'msg_len', 'rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 284.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom polarcodes import *\nfrom polarcodes import Sim_utils\n\
      import pprint\nimport time\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,msg_len=1,use_RM=True,rate=1,channel='ucl'):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='CRC Encoder',   # will show up in GRC\n      \
      \      in_sig=[np.int8],\n            # in_sig=None,\n            out_sig=[np.int8]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.msg_len=msg_len\n\
      \        self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \n    def forecast(self, noutput_items, ninputs):\n        \"\"\"\n        forecast\
      \ is only called from a general block\n        this is the default implementation\n\
      \        \"\"\"\n        # print(\"---------- Forecast function --------------\"\
      )\n        # print(\"ooo_items : \", noutput_items)\n        # ninput_items_required\
      \ = [0]*ninputs\n        ninput_items_required = [0]*ninputs\n        ninput_items_required[0]\
      \ = 10\n        # print(\"ninput_itemsreq : \", ninput_items_required)\n   \
      \     # for i in range(ninputs):\n        #     ninput_items_required[i] = 200\n\
      \        # print(\"ninput_itemsreq : \", ninput_items_required)\n        # time.sleep(1)\n\
      \        return ninput_items_required\n    \n    # noutput_items=200\n    #\
      \ ninput_items=200\n    def general_work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        # self.forecast(1,1)\n\
      \        # print('2',len(output_items[0]))\n        # print(len(input_items[0]))\n\
      \        # print((input_items[0].dtype))\n        # pprint.pprint((input_items[0]))\n\
      \        # pprint.pprint((input_items[1]))\n        msg_len=[self.msg_len] #\
      \ information length\n        # crc_n=Sim_utils.crc_selector(msg_len,'ucl')\
      \ # crc polynomial generator length\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    M=list(M.astype(int))\n        self.M=M\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            M=N  # no rate matching M == N\n\
      \        # print(1)\n        match_rate=list(np.array(k)/np.array(M)) # K/E\n\
      \        # rate=list(np.array(msg_len)/np.array(M)) # A/E\n        construction='5g'\
      \ # construction type\n        # sim_time=10000 # number of blocks\n       \
      \ useRM=self.useRM\n        snr=1\n        # time.sleep(5)\n        # print(2)\n\
      \        for i in range(0,len(msg_len)):\n            # time.sleep(2)\n    \
      \        myPC=Sim_utils.matching_scheme_selector(N[i],M[i],k[i],match_rate[i],useRM,snr,construction)\n\
      \            # print(msg_len[i])\n            # pprint.pprint((input_items[0]))\n\
      \            my_message = input_items[0][:msg_len[i]]\n            # print(my_message)\n\
      \            myPC.set_message(my_message,crc_n[i])\n            crc_coded=myPC.crc_coded\n\
      \            # print(myPC.punct_flag)\n            # print(myPC.frozen)\n  \
      \          # print(msg_len,' ',len(crc_coded))\n\n            # crc encoded\
      \ msg\n            zobo = np.zeros(M[i])\n            output_items[0][:M[i]]\
      \ = zobo\n            output_items[0][:k[i]] = crc_coded.astype(np.int8)\n \
      \           # print('3',len(output_items[0][:M[i]]))\n            # print('4',(output_items[0][:k[i]]))\n\
      \            # time.sleep(5)\n            self.consume(0, len(input_items[0]))\
      \ #consume port 0 input\n            # self.consume(1, N[i]) #consume port 1\
      \ input\n            \n        return len(output_items[0][:M[i]])\n        #\
      \ return len(input_items[0])\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    use_RM: activate_RM
  states:
    _io_cache: ('CRC Encoder', 'blk', [('msg_len', '1'), ('use_RM', 'True'), ('rate',
      '1'), ('channel', "'ucl'")], [('0', 'byte', 1)], [('0', 'byte', 1)], 'Embedded
      Python Block example - a simple multiply const', ['channel', 'msg_len', 'rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 284.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nfrom tkinter.constants\
      \ import S\nimport numpy as np\nfrom gnuradio import gr\nfrom polarcodes import\
      \ *\nfrom polarcodes import Sim_utils\nimport pprint\nimport time\nimport pmt\n\
      \n\nclass blk(gr.basic_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self,msg_len=1,use_RM=True,rate=1,channel='ucl',snr=5):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Noise',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            # in_sig=None,\n            out_sig=[np.complex64]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.msg_len=msg_len\n\
      \        self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \        self.snr=snr\n\n    def forecast(self, noutput_items, ninputs):\n \
      \       \"\"\"\n        forecast is only called from a general block\n     \
      \   this is the default implementation\n        \"\"\"\n        # print(\"----------\
      \ Forecast function --------------\")\n        # print(\"ooo_items : \", noutput_items)\n\
      \        # ninput_items_required = [0]*ninputs\n        ninput_items_required\
      \ = [0]*ninputs\n        ninput_items_required[0] = 10\n        # print(\"ninput_itemsreq\
      \ : \", ninput_items_required)\n        # for i in range(ninputs):\n       \
      \ #     ninput_items_required[i] = 200\n        # print(\"ninput_itemsreq :\
      \ \", ninput_items_required)\n        # time.sleep(1)\n        return ninput_items_required\n\
      \    \n    # noutput_items=200\n    # ninput_items=200\n    def general_work(self,\
      \ input_items, output_items):\n        \"\"\"example: multiply with constant\"\
      \"\"\n        # self.forecast(1,1)\n        # print('1',len(output_items[0]))\n\
      \        # print('tx',len(input_items[0]))\n        # print((input_items[0].dtype))\n\
      \        # pprint.pprint((input_items[0]))\n        # pprint.pprint((input_items[1]))\n\
      \        msg_len=[self.msg_len] # information length\n        # crc_n=Sim_utils.crc_selector(msg_len,'ucl')\
      \ # crc polynomial generator length\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    M=list(M.astype(int))\n        self.M=M\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            M=N  # no rate matching M == N\n\
      \        # print(1)\n        snr=self.snr\n        # time.sleep(5)\n       \
      \ # print(2)\n        for i in range(0,len(msg_len)):\n            # time.sleep(2)\n\
      \            # print(2)\n            tx_len = len(input_items[0])\n        \
      \    tx=input_items[0]\n            Linear_EbNo=10**(-snr/10)\n            noise\
      \ = np.random.normal(0, np.sqrt(2*Linear_EbNo)/2, size=(tx_len,2)).view(np.complex128)\n\
      \            noise= noise.flatten()\n            rx=tx+noise\n\n           \
      \ output_items[0][:tx_len] = rx\n            print('3',len(output_items[0][:tx_len]))\n\
      \            # print('4',(output_items[0][:k[i]]))\n            # time.sleep(5)\n\
      \            self.consume(0, len(input_items[0])) #consume port 0 input\n  \
      \          # self.consume(1, N[i]) #consume port 1 input\n            \n   \
      \     return len(output_items[0][:tx_len])\n        # return len(input_items[0])\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    snr: snr
    use_RM: activate_RM
  states:
    _io_cache: ('Noise', 'blk', [('msg_len', '1'), ('use_RM', 'True'), ('rate', '1'),
      ('channel', "'ucl'"), ('snr', '5')], [('0', 'complex', 1)], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', ['channel',
      'msg_len', 'rate', 'snr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1776, 428.0]
    rotation: 0
    state: enabled
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom polarcodes import *\nfrom polarcodes import Sim_utils\n\
      import pprint\nimport time\nimport pmt\n\n\n\nclass blk(gr.basic_block):  #\
      \ other base classes are basic_block, decim_block, interp_block\n    \"\"\"\
      Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,msg_len=1,use_RM=True,rate=1,channel='ucl',snr=1):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Rate_dematcher',   # will show up in GRC\n   \
      \         in_sig=[np.int8],\n            # in_sig=[np.float32],\n          \
      \  # in_sig=None,\n            out_sig=[np.float32]\n        )\n        # if\
      \ an attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n        self.msg_len=msg_len\n    \
      \    self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \        self.snr=snr\n\n    # def forecast(self, noutput_items, ninput_items_required):\n\
      \    #     #setup size of input_items[i] for work call\n    #     print(\"----------\
      \ Forecast function --------------\")\n    #     n_in1 = self.N\n    #     print(\"\
      noutput_items : \", type(ninput_items_required))\n    #     n_in2 = self.msg_len\n\
      \    #     # print(n_in1,\"n_in : \",  n_in2)\n    #     ninput_items_required.\
      \ =[1]\n    #     # ninput_items_required[1]=n_in2\n    #     # print(\"ninput_items_required[0]\
      \ : \", ninput_items_required[0])\n    #     # # print(\"noutput_items : \"\
      , noutput_items)\n    def forecast(self, noutput_items, ninputs):\n        \"\
      \"\"\n        forecast is only called from a general block\n        this is\
      \ the default implementation\n        \"\"\"\n        # print(\"---------- Forecast\
      \ function --------------\")\n        # print(\"ooo_items : \", noutput_items)\n\
      \        # ninput_items_required = [0]*ninputs\n        ninput_items_required\
      \ = [0]*ninputs\n        ninput_items_required[0] = 10\n        # time.sleep(1)\n\
      \        return ninput_items_required\n    \n\n    def general_work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    time.sleep(1)\n        print('2',len(input_items[0]))\n        # print(len(input_items[1]))\n\
      \        # print((input_items[0].dtype))\n        # pprint.pprint((input_items[0]))\n\
      \        # pprint.pprint((input_items[1]))\n        msg_len=[self.msg_len] #\
      \ information length\n        # crc_n=Sim_utils.crc_selector(msg_len,'ucl')\
      \ # crc polynomial generator length\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    M=list(M.astype(int))\n        self.M=M\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            M=N  # no rate matching M == N\n\
      \        # print(1)\n        match_rate=list(np.array(k)/np.array(M)) # K/E\n\
      \        # rate=list(np.array(msg_len)/np.array(M)) # A/E\n        construction='5g'\
      \ # construction type\n        # sim_time=10000 # number of blocks\n       \
      \ useRM=self.useRM\n        snr=self.snr\n        # time.sleep(5)\n        #\
      \ print(2)\n            \n\n        # def get_likelihoods(y):\n        #   \
      \  Linear_EbNo=10**(snr/10)\n        #     for i in range(len(y)):\n       \
      \ #         # s = np.random.normal(0, np.sqrt( (2*Linear_EbNo)), size=1)\n \
      \       #         # print(s)\n        #         # y[i]=2 * (y[i] - 0.5)*np.sqrt(Linear_EbNo)\
      \ \n        #         # y[i]=1-(2 * y[i] * np.sqrt(Linear_EbNo) )\n        #\
      \         y[i]=(1-(2 * y[i]))\n        #     return y\n\n        for i in range(0,len(msg_len)):\n\
      \            # time.sleep(2)\n            # print(11)\n            myPC=Sim_utils.matching_scheme_selector(N[i],self.M[i],k[i],match_rate[i],useRM,snr,construction)\n\
      \            # print(myPC.frozen)\n\n            # myPC.tx = self.modulation(self.myPC.u)\n\
      \            # print(myPC.punct_flag)\n            # if myPC.punct_flag:\n \
      \           #     # punctured bit not meant to be sent over the channel\n  \
      \          #     if myPC.punct_type == 'shorten':  #shortening procedure\n \
      \           #         myPC.rx = input_items[0]\n            #         myPC.likelihoods\
      \ = np.concatenate((np.array(get_likelihoods(myPC.rx), dtype=np.float64),\n\
      \            #             np.zeros(myPC.s,dtype=np.float64)))\n           \
      \ #         myPC.likelihoods[myPC.source_set_lookup == 0] = np.inf\n       \
      \     #     elif myPC.punct_type == 'punct':  #puncturing procedure\n      \
      \      #         myPC.rx = input_items[0]\n            #         myPC.likelihoods\
      \ = np.concatenate((np.zeros(myPC.s,dtype=np.float64),\n            #      \
      \       np.array(get_likelihoods(myPC.rx), dtype=np.float64)))\n           \
      \ #         myPC.likelihoods[myPC.source_set_lookup == 0] = 0\n            #\
      \     elif myPC.punct_type == 'rep':   #repetition procedure\n            #\
      \         myPC.rx = input_items[0]\n            #         rep_remover=myPC.rx[0:myPC.N]\n\
      \            #         for j in range(myPC.N,myPC.M):\n            #       \
      \      index = (j% myPC.N)\n            #             rep_remover[index] = rep_remover[index]\
      \  + myPC.rx[j]\n            #         myPC.rx=rep_remover\n            #  \
      \       myPC.likelihoods = np.array(get_likelihoods(myPC.rx), dtype=np.float64)\n\
      \                    \n            # else:\n            #     myPC.rx = input_items[0]\n\
      \            #     myPC.likelihoods = np.array(get_likelihoods(myPC.rx), dtype=np.float64)\n\
      \n            myPC.rx = input_items[0]\n            AWGN(myPC, snr)\n\n\n  \
      \          # print(5)\n            # print(msg_len,' ',len(myPC.u))\n      \
      \      # output_items[0] = np.ones(256,dtype=np.int0)\n            output_items[0][:N[i]]\
      \ = myPC.likelihoods.astype(np.float64)\n            # print('6',len(output_items[0][:N[i]]))\n\
      \            # print(('6',(output_items[0][:N[i]])))\n            # time.sleep(5)\n\
      \            self.consume(0, len(input_items[0])) #consume port 0 input\n  \
      \          # self.consume(1, N[i]) #consume port 1 input\n            \n   \
      \     return len(output_items[0][:N[i]])\n        # return len(input_items[0])\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    snr: snr
    use_RM: activate_RM
  states:
    _io_cache: ('Rate_dematcher', 'blk', [('msg_len', '1'), ('use_RM', 'True'), ('rate',
      '1'), ('channel', "'ucl'"), ('snr', '1')], [('0', 'byte', 1)], [('0', 'float',
      1)], 'Embedded Python Block example - a simple multiply const', ['channel',
      'msg_len', 'rate', 'snr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1368, 764.0]
    rotation: 180
    state: enabled
- name: epy_block_0_2_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom polarcodes import *\nfrom polarcodes import Sim_utils\n\
      import pprint\nimport time\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,msg_len=1,use_RM=True,rate=1,channel='ucl',list_n=4,snr=1):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Polar Decoder',   # will show up in GRC\n    \
      \        in_sig=[np.float32],\n            # in_sig=[np.float32],\n        \
      \    # in_sig=None,\n            out_sig=[np.float32]\n        )\n        #\
      \ if an attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n        self.msg_len=msg_len\n    \
      \    self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \        self.list_n=list_n\n        self.snr=snr\n\n    # def forecast(self,\
      \ noutput_items, ninput_items_required):\n    #     #setup size of input_items[i]\
      \ for work call\n    #     print(\"---------- Forecast function --------------\"\
      )\n    #     n_in1 = self.N\n    #     print(\"noutput_items : \", type(ninput_items_required))\n\
      \    #     n_in2 = self.msg_len\n    #     # print(n_in1,\"n_in : \",  n_in2)\n\
      \    #     ninput_items_required. =[1]\n    #     # ninput_items_required[1]=n_in2\n\
      \    #     # print(\"ninput_items_required[0] : \", ninput_items_required[0])\n\
      \    #     # # print(\"noutput_items : \", noutput_items)\n    def forecast(self,\
      \ noutput_items, ninputs):\n        \"\"\"\n        forecast is only called\
      \ from a general block\n        this is the default implementation\n       \
      \ \"\"\"\n        # print(\"---------- Forecast function --------------\")\n\
      \        # print(\"ooo_items : \", noutput_items)\n        # ninput_items_required\
      \ = [0]*ninputs\n        ninput_items_required = [0]*ninputs\n        ninput_items_required[0]\
      \ = 10\n        # time.sleep(1)\n        return ninput_items_required\n    \n\
      \n    def general_work(self, input_items, output_items):\n        \"\"\"example:\
      \ multiply with constant\"\"\"\n        time.sleep(1)\n        # print('7',len(input_items[0]))\n\
      \        # print(len(input_items[1]))\n        # print((input_items[0].dtype))\n\
      \        # pprint.pprint((input_items[0]))\n        # pprint.pprint((input_items[1]))\n\
      \        msg_len=[self.msg_len] # information length\n        # crc_n=Sim_utils.crc_selector(msg_len,'ucl')\
      \ # crc polynomial generator length\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    M=list(M.astype(int))\n        self.M=M\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            M=N  # no rate matching M == N\n\
      \        # print(1)\n        match_rate=list(np.array(k)/np.array(M)) # K/E\n\
      \        # rate=list(np.array(msg_len)/np.array(M)) # A/E\n        construction='5g'\
      \ # construction type\n        # sim_time=10000 # number of blocks\n       \
      \ useRM=self.useRM\n        snr=self.snr\n        # time.sleep(5)\n        #\
      \ print(2)\n        for i in range(0,len(msg_len)):\n            # time.sleep(2)\n\
      \            # print(np.inf-np.inf)\n            myPC=Sim_utils.matching_scheme_selector(N[i],self.M[i],k[i],match_rate[i],useRM,snr,construction)\n\
      \            # print(myPC.frozen)\n\n            # initiate crc decoder parameters\n\
      \            dummy=np.random.randint(2, size=msg_len,dtype=np.int8)\n      \
      \      myPC.crc_encode=CRC(dummy,crc_n[i])\n\n            # get decoder input\n\
      \            myPC.likelihoods=input_items[0]\n            myPC.likelihoods=np.array(myPC.likelihoods,dtype=np.float64)\n\
      \            # pprint.pprint(myPC.likelihoods)\n\n            # Decode\n   \
      \         # Decode(myPC) #to use scd decoder\n            Decode(myPC, list=self.list_n,\
      \ decoder_name ='SCL')\n            \n            message_received=np.array(myPC.message_received,dtype=np.float32)\n\
      \            rx_msg=np.array(myPC.message_received,dtype=np.int8)\n        \
      \    with open('sim6dcdmdg.txt','a') as f:\n                f.write(f'{snr},{list(rx_msg)}\\\
      n')\n                f.close()\n\n            print('msg ',message_received)\n\
      \            \n            \n            # print(msg_len,' ',len(myPC.u))\n\
      \            # output_items[0] = np.ones(256,dtype=np.int0)\n            output_items[0][:msg_len[i]]\
      \ = message_received\n            # print('8',(output_items[0][:msg_len[i]]))\n\
      \            # print('7',(output_items[0][:N[i]]))\n            # time.sleep(5)\n\
      \            self.consume(0, len(input_items[0])) #consume port 0 input\n  \
      \          # self.consume(1, N[i]) #consume port 1 input\n            \n   \
      \     return len(output_items[0][:msg_len[i]])\n        # return len(input_items[0])\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    list_n: List_n
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    snr: snr
    use_RM: activate_RM
  states:
    _io_cache: ('Polar Decoder', 'blk', [('msg_len', '1'), ('use_RM', 'True'), ('rate',
      '1'), ('channel', "'ucl'"), ('list_n', '4'), ('snr', '1')], [('0', 'float',
      1)], [('0', 'float', 1)], 'Embedded Python Block example - a simple multiply
      const', ['channel', 'list_n', 'msg_len', 'rate', 'snr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 756.0]
    rotation: 180
    state: enabled
- name: epy_block_0_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom polarcodes import *\nfrom polarcodes import Sim_utils\n\
      import pprint\nimport time\nimport pmt\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,msg_len=1,use_RM=True,rate=1,channel='ucl'):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Rate Matcher',   # will show up in GRC\n     \
      \       in_sig=[np.int8],\n            # in_sig=None,\n            out_sig=[np.int8]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.msg_len=msg_len\n\
      \        self.rate=rate\n        self.useRM= use_RM\n        self.channel=channel\n\
      \n    # def forecast(self, noutput_items, ninput_items_required):\n    #   \
      \  #setup size of input_items[i] for work call\n    #     print(\"----------\
      \ Forecast function --------------\")\n    #     n_in1 = noutput_items\n   \
      \ #     print(\"noutput_items : \", type(ninput_items_required))\n    #    \
      \ n_in2 = self.msg_len\n    #     # print(n_in1,\"n_in : \",  n_in2)\n    #\
      \     ninput_items_required[0]=20\n    #     # ninput_items_required[1]=n_in2\n\
      \    #     print(\"ninput_items_required[0] : \", ninput_items_required)\n \
      \   #     # # print(\"noutput_items : \", noutput_items)\n    def forecast(self,\
      \ noutput_items, ninputs):\n        \"\"\"\n        forecast is only called\
      \ from a general block\n        this is the default implementation\n       \
      \ \"\"\"\n        # print(\"---------- Forecast function --------------\")\n\
      \        # print(\"ooo_items : \", noutput_items)\n        # ninput_items_required\
      \ = [0]*ninputs\n        ninput_items_required = [0]*ninputs\n        ninput_items_required[0]\
      \ = 10\n        # print(\"ninput_itemsreq : \", ninput_items_required)\n   \
      \     # for i in range(ninputs):\n        #     ninput_items_required[i] = 200\n\
      \        # print(\"ninput_itemsreq : \", ninput_items_required)\n        # time.sleep(1)\n\
      \        return ninput_items_required\n    \n    # noutput_items=200\n    #\
      \ ninput_items=200\n    def general_work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        # self.forecast(1,1)\n\
      \        # print('2',len(output_items[0]))\n        # print('7',len(input_items[0]))\n\
      \        # print((input_items[0].dtype))\n        # pprint.pprint((input_items[0]))\n\
      \        # pprint.pprint((input_items[1]))\n        msg_len=[self.msg_len] #\
      \ information length\n        # crc_n=Sim_utils.crc_selector(msg_len,'ucl')\
      \ # crc polynomial generator length\n        crc_n=Sim_utils.crc_selector(msg_len,self.channel)\
      \ # crc polynomial generator length\n        k=list(crc_n+np.array(msg_len))\n\
      \        M=(np.array(msg_len)/np.array(self.rate))  #codeword E = A/R\n    \
      \    M=list(M.astype(int))\n        self.M=M\n        N = Sim_utils.mothercode(self.channel,k,M)\n\
      \        if self.useRM == False:\n            M=N  # no rate matching M == N\n\
      \        # print(1)\n        match_rate=list(np.array(k)/np.array(M)) # K/E\n\
      \        # rate=list(np.array(msg_len)/np.array(M)) # A/E\n        construction='5g'\
      \ # construction type\n        # sim_time=10000 # number of blocks\n       \
      \ useRM=self.useRM\n        snr=1\n        # time.sleep(5)\n        # print(2)\n\
      \        # print(N,M,k,match_rate,useRM)\n        for i in range(0,len(msg_len)):\n\
      \            # time.sleep(2)\n            # print(1)\n            myPC=Sim_utils.matching_scheme_selector(N[i],self.M[i],k[i],match_rate[i],useRM,snr,construction)\n\
      \            # print(2)\n            # pprint.pprint((input_items[0]))\n   \
      \         myPC.tx = input_items[0][:N[i]]\n            # print('rm', myPC.tx)\n\
      \            \n            # Rate matching\n            myPC.tx = myPC.tx #\
      \ No rate matching used\n            # print(myPC.tx)\n            if myPC.punct_flag:\n\
      \                # punctured bit not meant to be sent over the channel\n   \
      \             if myPC.punct_type == 'shorten':  #shortening procedure\n    \
      \                myPC.tx = myPC.tx[0:myPC.M]\n                elif myPC.punct_type\
      \ == 'punct':  #puncturing procedure\n                    myPC.tx = myPC.tx[myPC.s:myPC.N]\n\
      \                elif myPC.punct_type == 'rep':   #repetition procedure\n  \
      \                  match_position= np.array(range(0,myPC.M))% myPC.N \n    \
      \                myPC.tx=myPC.tx[match_position]\n\n            # print(myPC.punct_flag)\n\
      \            # print(myPC.frozen)\n            # print(msg_len,' ',len(myPC.u))\n\
      \            # output_items[0] = np.ones(256,dtype=np.int0)\n            # self.consume(0,\
      \ M[i]) #consume port 1 input\n            output_items[0][:M[i]] = myPC.tx.astype(np.int8)\n\
      \            # print('5',len(output_items[0][:M[i]]))\n            # print('6',(output_items[0][:M[i]]))\n\
      \            # time.sleep(5)\n            self.consume(0, len(input_items[0]))\
      \ #consume port 0 input\n            # self.consume(1, N[i]) #consume port 1\
      \ input\n            \n        return len(output_items[0][:M[i]])\n        #\
      \ return len(input_items[0])\n"
    affinity: ''
    alias: ''
    channel: channel
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: msg_len
    rate: rate
    use_RM: activate_RM
  states:
    _io_cache: ('Rate Matcher', 'blk', [('msg_len', '1'), ('use_RM', 'True'), ('rate',
      '1'), ('channel', "'ucl'")], [('0', 'byte', 1)], [('0', 'byte', 1)], 'Embedded
      Python Block example - a simple multiply const', ['channel', 'msg_len', 'rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 284.0]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'True'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: After Mod
    nconnections: '1'
    size: '100'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1392, 300.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: ''
    label1: Input msg
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Input message
    nconnections: '1'
    size: msg_len
    srate: '50'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.050'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 412.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: red
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'True'
    gui_hint: ''
    label1: decoded msg
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Polar codes Decoded message
    nconnections: '1'
    size: msg_len
    srate: '50'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 772.0]
    rotation: 180
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: 20e6
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 2.4e9
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: ''
    gain0: '50'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 292.0]
    rotation: 0
    state: disabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: 20e6
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 2.4e9
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '1'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Disabled
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 540.0]
    rotation: 0
    state: disabled

connections:
- [blocks_char_to_float_0_1, '0', blocks_delay_0, '0']
- [blocks_delay_0, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_delay_0_0, '0', qtgui_time_sink_x_0_1, '0']
- [blocks_throttle_0, '0', epy_block_0_1_0, '0']
- [blocks_throttle_0, '0', uhd_usrp_sink_0, '0']
- [digital_constellation_decoder_cb_0, '0', epy_block_0_2, '0']
- [digital_constellation_encoder_bc_1, '0', blocks_throttle_0, '0']
- [digital_constellation_encoder_bc_1, '0', qtgui_const_sink_x_0_0, '0']
- [epy_block_0, '0', epy_block_0_3, '0']
- [epy_block_0_0, '0', blocks_char_to_float_0_1, '0']
- [epy_block_0_0, '0', epy_block_0_1, '0']
- [epy_block_0_1, '0', epy_block_0, '0']
- [epy_block_0_1_0, '0', digital_constellation_decoder_cb_0, '0']
- [epy_block_0_2, '0', epy_block_0_2_0, '0']
- [epy_block_0_2_0, '0', blocks_delay_0_0, '0']
- [epy_block_0_3, '0', digital_constellation_encoder_bc_1, '0']
- [uhd_usrp_source_0, '0', digital_constellation_decoder_cb_0, '0']

metadata:
  file_format: 1
